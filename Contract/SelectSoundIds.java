// automatically generated by the FlatBuffers compiler, do not modify

package Contract;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SelectSoundIds extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static SelectSoundIds getRootAsSelectSoundIds(ByteBuffer _bb) { return getRootAsSelectSoundIds(_bb, new SelectSoundIds()); }
  public static SelectSoundIds getRootAsSelectSoundIds(ByteBuffer _bb, SelectSoundIds obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SelectSoundIds __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ids(int j) { int o = __offset(4); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int idsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector idsVector() { return idsVector(new IntVector()); }
  public IntVector idsVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer idsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer idsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }

  public static int createSelectSoundIds(FlatBufferBuilder builder,
      int idsOffset) {
    builder.startTable(1);
    SelectSoundIds.addIds(builder, idsOffset);
    return SelectSoundIds.endSelectSoundIds(builder);
  }

  public static void startSelectSoundIds(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addIds(FlatBufferBuilder builder, int idsOffset) { builder.addOffset(0, idsOffset, 0); }
  public static int createIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSelectSoundIds(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // ids
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SelectSoundIds get(int j) { return get(new SelectSoundIds(), j); }
    public SelectSoundIds get(SelectSoundIds obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

